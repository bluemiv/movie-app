{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","_ref2","poster","alt","react_default","a","createElement","src","title","className","MovieGenres","_ref3","genre","Movie","_ref","genres","synopsis","map","index","key","lib_default","text","maxLine","ellipsis","trimRight","basedOn","App","state","_getMovies","_callee","movies","regenerator_default","wrap","_context","prev","next","_this","_callApi","sent","setState","stop","fetch","then","response","json","data","catch","err","console","log","_renderMovies","movie","src_Movie","title_english","medium_cover_image","id","this","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"wUAmEA,SAASA,EAATC,GAAoC,IAAdC,EAAcD,EAAdC,OAAQC,EAAMF,EAANE,IAC1B,OACIC,EAAAC,EAAAC,cAAA,OAAKC,IAAKL,EAAQC,IAAKA,EAAKK,MAAOL,EAAKM,UAAU,kBAG1D,SAASC,EAATC,GAA8B,IAARC,EAAQD,EAARC,MAClB,OACIR,EAAAC,EAAAC,cAAA,QAAMG,UAAU,gBAAgBG,EAAhC,KAgBOC,MA/Cf,SAAAC,GAAkD,IAAlCN,EAAkCM,EAAlCN,MAAON,EAA2BY,EAA3BZ,OAAQa,EAAmBD,EAAnBC,OAAQC,EAAWF,EAAXE,SACnC,OACIZ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,SACXL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACXL,EAAAC,EAAAC,cAACN,EAAD,CAAaE,OAAQA,EAAQC,IAAKK,KAEtCJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACXL,EAAAC,EAAAC,cAAA,UAAKE,GACLJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACVM,EAAOE,IAAI,SAACL,EAAOM,GAAR,OAAkBd,EAAAC,EAAAC,cAACI,EAAD,CAAaE,MAAOA,EAAOO,IAAKD,OAElEd,EAAAC,EAAAC,cAAA,OAAKG,UAAU,mBACfL,EAAAC,EAAAC,cAACc,EAAAf,EAAD,CACIgB,KAAML,EACNM,QAAQ,IACRC,SAAS,SACTC,WAAS,EACTC,QAAQ,gBCyDbC,6MA5FbC,MAAQ,KAWRC,gCAAa,SAAAC,IAAA,IAAAC,EAAA,OAAAC,EAAA1B,EAAA2B,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUC,EAAKC,WADf,OACLP,EADKG,EAAAK,KAEXF,EAAKG,SAAS,CACZT,WAHS,wBAAAG,EAAAO,SAAAX,QAObQ,SAAW,WACT,OAAOI,MAAM,iEACZC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKf,SACvBgB,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,QAqC5BG,cAAgB,WAWd,OAVed,EAAKT,MAAMG,OAAOb,IAAI,SAACkC,EAAOjC,GAEzC,OADA8B,QAAQC,IAAIE,GACL/C,EAAAC,EAAAC,cAAC8C,EAAD,CACP5C,MAAO2C,EAAME,cACbnD,OAAQiD,EAAMG,mBACdvC,OAAQoC,EAAMpC,OACdC,SAAUmC,EAAMnC,SAChBG,IAAKgC,EAAMI,yIA3DfC,KAAK5B,8CAmEL,OADAoB,QAAQC,IAAI,eAEV7C,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OACZ+C,KAAK7B,MAAMG,OAAS0B,KAAKN,gBAAkB,qBAlFlCO,aCREC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO5D,EAAAC,EAAAC,cAAC2D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,KAAK,SAAA6B,GACjCA,EAAaC","file":"static/js/main.7d2d93b8.chunk.js","sourcesContent":["// import React, { Component } from 'react'; // class component\nimport React from 'react'; // functional component\nimport PropTypes from 'prop-types';\nimport LinesEllipsis from 'react-lines-ellipsis';\nimport './Movie.css'; // css 파일 임포트\n\n// // class component -> smart component\n// class Movie extends Component {\n\n//     static propTypes = {\n//         title: PropTypes.string.isRequired,\n//         poster: PropTypes.string.isRequired\n//     }\n\n//     render() {\n//         console.log(this.props);\n//         return(\n//             <div>\n//                 <MoviePoster poster={this.props.poster}/>\n//                 <h1>{this.props.title}</h1>\n//             </div>            \n//         );\n//     }\n// }\n\n// class MoviePoster extends Component {\n\n//     static propTypes = {\n//         poster: PropTypes.string.isRequired\n//     }\n\n//     render() {\n//         console.log(this.props);\n//         return (\n//             <img src={this.props.poster}/>\n//         );\n//     }\n// }\n\n\n\n// functinal component -> life cycle, function reder 등등 다 없음. 오직 return만 있음\n// dumps component\nfunction Movie({title, poster, genres, synopsis}) {\n    return (\n        <div className=\"Movie\">\n            <div className=\"Movie__Column\">\n                <MoviePoster poster={poster} alt={title}/>\n            </div>\n            <div className=\"Movie__Column\">\n                <h1>{title}</h1>\n                <div className=\"Movie__Genres\">\n                    {genres.map((genre, index) => <MovieGenres genre={genre} key={index} />)}\n                </div>\n                <div className=\"Movie__Synopsis\">\n                <LinesEllipsis\n                    text={synopsis}\n                    maxLine='3'\n                    ellipsis=' (...)'\n                    trimRight\n                    basedOn='letters'\n                />\n                </div>\n            </div>\n        </div>\n    )\n}\nfunction MoviePoster({poster, alt}) {\n    return (\n        <img src={poster} alt={alt} title={alt} className=\"Movie__Poster\"/>\n    )\n}\nfunction MovieGenres({genre}) {\n    return (\n        <span className=\"Movie__Genre\">{genre} </span>\n    )\n}\nMovie.propTypes = {\n    title: PropTypes.string.isRequired,\n    poster: PropTypes.string.isRequired,\n    genres: PropTypes.string.isRequired,\n    synopsis: PropTypes.string.isRequired,\n}\nMoviePoster.propTypes = {\n    poster: PropTypes.string.isRequired,\n    alt: PropTypes.string.isRequired\n}\nMovieGenres.propTypes = {\n    genre: PropTypes.string.isRequired,\n}\nexport default Movie;\n\n// 참고!\n// component > render > return > JSX(react로 작성하는 html)\n\n// Data flow!\n// 부모(메인)이 데이터를 다 가지고 있고 자식에게 데이터를 전달해줌.\n// 자식 컴포넌트에서 데이터를 가져올때는 props를 이용","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from \"./Movie.js\";\n\n// 부모 컴포넌트가 자식 컴포넌트에게 데이터를 줌\n\n// const movieTitles = [\n//   \"사바하\",\n//   \"증인\",\n//   \"극한직업\",\n//   \"알리타\"\n// ]\n\n// const movieImages = [\n//   \"http://img.cgv.co.kr/Movie/Thumbnail/Poster/000081/81616/81616_1000.jpg\",\n//   \"http://img.cgv.co.kr/Movie/Thumbnail/Poster/000081/81581/81581_185.jpg\",\n//   \"http://img.cgv.co.kr/Movie/Thumbnail/Poster/000081/81552/81552_1000.jpg\",\n//   \"https://cdn.clien.net/web/api/file/F01/7960316/c44f2d7231bf3.jpg\"\n// ]\n\nclass App extends Component {\n  // Life cycle\n  // render: componentWillMount() -> render() -> componentDidMount()\n  // Update: componentWillReceiveProps() -> shouldComponentUpdate() -> componentWillUpdate() -> render() -> componentDidUpdate()\n\n  state = {}\n\n  componentWillMount() {\n    // console.log(\"Life cycle 1: Will Mount.\")\n  }\n  \n\n  componentDidMount() {\n    this._getMovies();\n  }\n\n  _getMovies = async () => { // async를 쓰지 않으면 await는 작동하지 않음.\n    const movies = await this._callApi() // 작업이 끝날때까지 아래 작업이 실행 안됨.\n    this.setState({\n      movies\n    })\n  }\n\n  _callApi = () => {\n    return fetch(\"https://yts.am/api/v2/list_movies.json?sort_by=download_count\")\n    .then(response => response.json()) // 위 작업이 끝나면 실행. 성공하든 실패하든...\n    .then(json => json.data.movies) // arrow function\n    .catch(err => console.log(err)) // Error가 있으면 catch에서 실행\n  }\n\n  // componentDidMount() {\n  //   // console.log(\"Life cycle 3: Did Mount.\")\n  //   setTimeout(() => { // function은 오래된 방식, () => : 최신방식\n  //     // console.log(\"Hello!\")\n  //     this.setState({\n  //       // Map을 이용한 데이터 생성할 예정\n  //       movies: [\n  //         {\n  //           title: \"사바하\",\n  //           poster: \"http://img.cgv.co.kr/Movie/Thumbnail/Poster/000081/81616/81616_1000.jpg\"\n  //         },\n  //         {\n  //           title: \"증인\",\n  //           poster: \"http://img.cgv.co.kr/Movie/Thumbnail/Poster/000081/81581/81581_185.jpg\"\n  //         },\n  //         {\n  //           title: \"극한직업\",\n  //           poster: \"http://img.cgv.co.kr/Movie/Thumbnail/Poster/000081/81552/81552_1000.jpg\"\n  //         },\n  //         {\n  //           title: \"알리타\",\n  //           poster: \"https://cdn.clien.net/web/api/file/F01/7960316/c44f2d7231bf3.jpg\"\n  //         },\n  //         {\n  //           title: \"캡틴마블\",\n  //           poster: \"https://file2.nocutnews.co.kr/newsroom/image/2019/03/06/20190306032809346893_0_777_1113.jpg\"\n  //         },\n  //       ]\n  //       // ...this.state.movies, // 이전 목록은 놔두고, 데이터 추가!\n  //     })\n  //   }, 3000)\n  // }\n\n  // 나의 기능과 리액트 자체 기능을 구분하기위해 언더스코어 사용하여 구분하면 좋음.\n  _renderMovies = () => {\n    const movies = this.state.movies.map((movie, index) => { // mapping!!\n        console.log(movie)\n        return <Movie\n        title={movie.title_english}\n        poster={movie.medium_cover_image}\n        genres={movie.genres}\n        synopsis={movie.synopsis}\n        key={movie.id}\n        /* key값으로 component의 id를 사용하는 것은 느려서 좋지 않음. *//>  \n    })\n    return movies\n  }\n\n  render() { // 이 컴포넌트가 나한테 보여주려는 것이 무엇인가?\n    console.log(\"Did render.\")\n    return (\n      <div className=\"App\">\n        {this.state.movies ? this._renderMovies() : \"Loading...\" /* loading state */}\n        {/* {this.state.greeting} */}\n        {/* {this.state.movies.map((movie, index) => { // mapping!!\n            return <Movie title={movie.title} poster={movie.poster} key={index}/>  \n        })} */}\n        \n        {/* <Movie title={movieTitles[0]} poster={movieImages[0]}/>\n        <Movie title={movieTitles[1]} poster={movieImages[1]}/>\n        <Movie title={movieTitles[2]} poster={movieImages[2]}/>\n        <Movie title={movieTitles[3]} poster={movieImages[3]}/> */}\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root')); // id가 root인곳에 출력(render)\n// 리액트 돔은 한개의 컴포넌트를 출력(render)\n\nserviceWorker.unregister();\n\n\n// 참고!\n// react는 UI 라이브러리..\n// reactDOM Document Object Model: 출력을 도와주는 모델\n// 리액트를 모바일에 쓰고 싶다면 reactNative를 사용.."],"sourceRoot":""}